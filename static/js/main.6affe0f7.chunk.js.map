{"version":3,"sources":["container/Pages/loader.gif","container/Pages/Surah/Surah.jsx","container/Pages/Ayat/Ayat.jsx","container/home/Home.jsx","serviceWorker.js","index.js"],"names":["module","exports","home","state","surah","isLoading","getPostApi","axios","get","then","res","console","log","data","setState","catch","err","handleSubmit","id","props","history","push","this","className","src","loading","alt","map","key","number","onClick","englishName","numberOfAyahs","revelationType","Component","Ayat","ayat","name","englishNameTranslation","match","params","Axios","ayahs","numberInSurah","text","Home","path","exact","component","Surah","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6affe0f7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/loader.557336d4.gif\";","import React, { Component, Fragment } from 'react';\r\n// import { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport axios from 'axios';\r\nimport loading from '../loader.gif';\r\nimport './Surah.css';\r\n\r\nclass home extends Component {\r\n\r\n    state = {\r\n        surah: [],\r\n        isLoading: true\r\n        // formBlogPost: {\r\n        //     userId: 1,\r\n        //     id: 1,\r\n        //     title: '',\r\n        //     body: ''\r\n        // },\r\n        // isUpdate: false\r\n    }\r\n\r\n    // getPostApi = () => {\r\n    //     axios.get('https://al-quran-8d642.firebaseio.com/data.json')\r\n    //         .then((res) => {\r\n    //             console.log(res)\r\n    //             this.setState({\r\n    //                 surah: res.data\r\n    //             })\r\n    //         })\r\n    //         .catch((err) => {\r\n    //             console.log(err)\r\n    //         })\r\n    // }\r\n\r\n    getPostApi = () => {\r\n        axios.get('http://api.alquran.cloud/surah')\r\n            .then((res) => {\r\n                console.log(res.data.data)\r\n                this.setState({\r\n                    surah: res.data.data,\r\n                    isLoading: false\r\n                })\r\n            })\r\n            .catch((err) => {\r\n                console.log(err)\r\n            })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getPostApi()\r\n    }\r\n\r\n    handleSubmit = (id) => {\r\n        // alert('test '+id);\r\n        this.props.history.push(`/Ayat/${id}`)\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return <div className=\"isLoading\"><img src={loading} alt=\"logo\" /></div>\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <div className=\"header\">\r\n                    <div className=\"title\"><p>Qur'an App</p></div>\r\n                </div>\r\n                <div className=\"card-first\">\r\n\r\n                    {\r\n                        this.state.surah.map(surah => {\r\n                            return (\r\n                                <div className=\"card\" key={surah.number} onClick={() => this.handleSubmit(surah.number) }>\r\n                                    <div className=\"number-surah\">{surah.number}</div>\r\n                                    <div className=\"detail-surah\">\r\n                                        <p>{surah.englishName}</p>\r\n                                        <p>{surah.numberOfAyahs} Ayah - {surah.revelationType}</p>\r\n                                    </div>\r\n                                </div>\r\n                                // return <Post key={post.id} data={post} remove={this.handleRemove} update={this.handleUpdate} goDetail={this.handleDetail} />\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default home;\r\n","import React, { Component, Fragment } from 'react';\r\nimport Axios from 'axios';\r\nimport './Ayat.css';\r\nimport loading from '../loader.gif';\r\n\r\n\r\nclass Ayat extends Component {\r\n\r\n    state = {\r\n        ayat: [],\r\n        number: 0,\r\n        name: '',\r\n        englishName: '',\r\n        englishNameTranslation: '',\r\n        revelationType: '',\r\n        numberOfAyahs: 0,\r\n        isLoading: true\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     let id = this.props.match.params.id;\r\n    //     Axios.get(`https://al-quran-8d642.firebaseio.com/surat/${id}.json`)\r\n    //     .then((res) => {\r\n    //         console.log(res.data);\r\n    //         // let ayat = res.data;\r\n    //         this.setState({\r\n    //             ayat: res.data\r\n    //         })\r\n    //     })\r\n    // }\r\n\r\n    componentDidMount() {\r\n        let id = this.props.match.params.id;\r\n        Axios.get(`http://api.alquran.cloud/surah/${id}`)\r\n            .then((res) => {\r\n                console.log(res.data);\r\n                // let ayat = res.data;\r\n                this.setState({\r\n                    ayat: res.data.data.ayahs,\r\n                    number: res.data.data.number,\r\n                    name: res.data.data.name,\r\n                    englishName: res.data.data.englishName,\r\n                    englishNameTranslation: res.data.data.englishNameTranslation,\r\n                    revelationType: res.data.data.revelationType,\r\n                    numberOfAyahs: res.data.data.numberOfAyahs,\r\n                    isLoading: false\r\n                })\r\n            })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.isLoading) {\r\n            return <div className=\"isLoading\"><img src={loading} alt=\"logo\" /></div>\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <div className=\"header\">\r\n                    <div className=\"selected-surah\">\r\n                        <div className=\"circle-item number-of-ayah\">\r\n                            {this.state.numberOfAyahs}<span>Ayah</span>\r\n                        </div>\r\n                        <div className=\"name-of-surah\">\r\n                            <p className=\"title-surah\">{this.state.englishName}</p>\r\n                            <p className=\"title-ayah\">{this.state.englishNameTranslation}</p>\r\n                        </div>\r\n                        <div className=\"circle-item surah-place\">{this.state.revelationType}</div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"container\" id=\"scrolling_div\">\r\n                    <div className=\"content\">\r\n                        <p className=\"bismillah font-uthmani hide\">بِسْمِ اللَّهِ الرَّحْمَٰنِ الرَّحِيمِ</p>\r\n                        <ul>\r\n                            {\r\n                                this.state.ayat.map(ayat => {      \r\n                                    return (                              \r\n                                        <li id=\"ayah1\" key={ayat.numberInSurah}>\r\n                                            <div className=\"content-ayah font-uthmani\">\r\n                                                { ayat.text }\r\n                                                {/* <div className=\"content-translation\">\r\n                                                    { ayat.id }\r\n                                                </div> */}\r\n                                            </div>\r\n                                            <div className=\"number-ayah\">{ ayat.numberInSurah }</div>\r\n                                        </li>     \r\n                                    )                               \r\n                                })\r\n                            }\r\n                        </ul>\r\n                        {/* <div className=\"show-menu-button\">\r\n                            <div className=\"icon-menu\"></div>\r\n                        </div> */}\r\n                    </div>\r\n                </div>\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Ayat;","// Libraries\r\nimport React, { Component, Fragment } from 'react';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\n\r\n// Pages\r\nimport Surah from '../Pages/Surah/Surah';\r\nimport Ayat from '../Pages/Ayat/Ayat';\r\n\r\n// Style\r\n// import './Home.css';\r\n\r\n\r\nclass Home extends Component {\r\n\r\n    render() {\r\n        return (\r\n            <Router>\r\n                \r\n                <Fragment>\r\n                    <Route path=\"/\" exact component={ Surah } />\r\n                    <Route path=\"/Ayat/:id\" component={ Ayat } />\r\n                </Fragment>\r\n            </Router>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Home from './container/home/Home';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Home />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}